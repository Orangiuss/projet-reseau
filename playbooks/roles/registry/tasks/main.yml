---
  - name: Install du module kubernetes.core.k8s
    pip:
      name: kubernetes
  
  - name: création répertoire certificat
    file:
      path: "/mnt/registre" 
      state: directory

  - name: copie fichier création de volume persistant
    copy:
      src: volume-persistant.yml
      dest: ~/volume-persistant.yml
      owner: root
      group: root
      mode: u=rw,g=r,o=r

  - name: copie fichier création de volume persistant claim
    ansible.builtin.copy:
      src: registre-volume.yml
      dest: ~/registre-volume.yml
      owner: root
      group: root
      mode: '0644'

  - name: copie fichier de déploiement du registre local
    template:
      src: deploiement-registry.yml.j2
      dest: ~/deploiement-registry.yml
      owner: root
      group: root
      mode: u=rw,g=r,o=r
  
  - name: copie fichier de creation de secret tls
    template:
      src: secret-tls.yml.j2
      dest: ~/secret-tls.yml
      owner: root
      group: root
      mode: u=rw,g=r,o=r


  - name: remplacement de SERVER_CRT par le contenu de registry.crt
    shell: "sed -i \"s/SERVEUR_CRT/`cat {{ repertoire_certificat }}registry.crt {{ repertoire_certificat }}autorite.crt|base64 -w0`/g\" ~/secret-tls.yml"
  
  - name: remplacement de SERVER_KEY par le contenu de registry.key
    shell: "sed -i \"s/SERVEUR_KEY/`cat {{ repertoire_certificat }}registry.key|base64 -w0`/g\" ~/secret-tls.yml"
  
  - name: remplacement de AUTORITE_CRT par le contenu de autorite.crt
    shell: "sed -i \"s/AUTORITE_CRT/`cat {{ repertoire_certificat }}autorite.crt|base64 -w0`/g\" ~/secret-tls.yml"
    


  # Deploiements
  - name: création volume persistant
    kubernetes.core.k8s:
      state: present
      src: ~/volume-persistant.yml

  - name: creation volume claim
    kubernetes.core.k8s:
      state: present
      src: ~/registre-volume.yml

  - name: Création secret tls
    kubernetes.core.k8s:
      state: present
      src: ~/secret-tls.yml

  - name: Déploiement registry
    kubernetes.core.k8s:
      state: present
      src: ~/deploiement-registry.yml
  

  
# kubectl create -f registre-volume.yml
  # - name: création volume persistant
  #   shell: kubectl apply -f volume-persistant.yml

  # - name: creation volume claim 
  #   shell: kubectl create -f registre-volume.yml

# kubectl create secret tls registry-cert --cert=/root/docker/ssl/registry.crt --key=/root/docker/ssl/registry.key -n default

  # - name: creation secret ansible
  #   shell: "kubectl create secret tls registry-cert --cert={{ repertoire_certificat }}registry.crt --key={{ repertoire_certificat }}registry.key -n default"
  
  # kubectl create -f deploiement-registry.yml
  # - name: deploiement registry
  #   shell: kubectl create -f deploiement-registry.yml

  # - name: creation d'un secret kubernetes
  #   kubernetes.core.k8s:
  #     state: present
  #     definition: 
  #       apiVersion: v1
  #       kind: Secret
  #       #type: tls       
  #       metadata:
  #         name: "cert-registre"
  #         namespace: "default"
  #       type: kubernetes.io/tls
  #       stringData:
  #         # cert: "{{ lookup('file', repertoire_certificat + 'registry.crt') | b64encode | string }}"
  #         # key: "{{ lookup('file', repertoire_certificat + 'registry.key') | b64encode | string }}"
  #         cert: "{{ repertoire_certificat + 'registry.crt' }}"
  #         key: "{{ repertoire_certificat + 'registry.key' }}"


# tasks file for roles/registry
  # - name: ipv4 manager
  #   debug:
  #     var: ansible_default_ipv4.address

  # - name: Deploiement d'un registre docker
  #   community.docker.docker_container:
  #     name: registry
  #     image: registry:2
  #     state: started
  #     recreate: false
  #     restart: false
  #     detach: true
  #     restart_policy: "always"
  #     ports:
  #       - "5000:5000"
  
  # - name: Install du module kubernetes.core.k8s
  #   pip:
  #     name: kubernetes
  
  # commande:kubectl create secret docker-registry reg-secret \
  # --docker-server=localhost:5000 \
  # --docker-username=VOTRE_UTILISATEUR \
  # --docker-password=VOTRE_MOT_DE_PASSE \
  # --docker-email=VOTRE_EMAIL
  # ou
  # commande:kubectl create secret docker-registry docker-hub-sec --docker-username=VOTRE_UTILISATEUR --docker-password=VOTRE_MOT_DE_PASSE
  # - name: creation d'un secret kubernetes
  #   kubernetes.core.k8s:
  #     state: present
  #     definition: 
  #       apiVersion: v1
  #       kind: Secret
  #       # type: Opaque       
  #       metadata:
  #         name: "docker-hub-sec"
  #         namespace: "default"
  #       # type: kubernetes.io/dockerconfigjson
  #       data:
  #         password: password
  #         username: test
          #config_data.json: "lookup('pipe', 'echo -n {\"auths\":{\"localhost:5000\":{\"test\":\"' + VOTRE_UTILISATEUR + '\",\"test\":\"' + VOTRE_MOT_DE_PASSE + '\",\"email\":\"' + VOTRE_EMAIL + '\"}}}') | b64encode }}"
#https://stackoverflow.com/questions/59203583/how-can-i-create-a-kubernetes-secret-with-ansible
...
# commandes a faire après:
# docker pull nginx
# docker tag nginx 127.0.0.1:31200/nginx
# docker push 127.0.0.1:31200/nginx
# apt install nano
# nano testpod.yml
# ------
# docker pull orangius/app_m2ssi:latest
# docker tag orangius/app_m2ssi:latest 127.0.0.1:31200/nginx:latest
# docker push 127.0.0.1:31200/nginx:latest
# docker pull orangius/mysql_m2ssi:latest
# docker tag orangius/app_m2ssi:latest 127.0.0.1:31200/mysql_m2ssi:latest
# docker push 127.0.0.1:31200/mysql_m2ssi:latest

# fonctionne
# apiVersion: v1
# kind: Pod
# metadata:
#   namespace: default
#   name: test
#   labels:
#     app: mon-app
# spec:
#   containers:
#   - name: mon-conteneur
#     image: 10.164.246.206:5000/nginx
#   imagePullSecrets:
#   - name: docker-hub-sec

# fonctionne aussi:
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mon-deploiement
#   namespace: default
#       - name: mon-conteneur
#         image: 10.164.246.206:5000/nginx
#       imagePullSecrets:
#       - name: docker-hub-sec

# pour afficher infos : kubectl describe pods -n default
# erreur : https://stackoverflow.com/questions/59844553/kubernetes-failed-to-pull-image-server-gave-http-response-to-https-client
# kubectl apply -f testpod.yaml
# pour afficher les pods ainsi que leur node:
# kubectl get pods -o wide
# pour supprimer les pods:
# kubectl delete pods --all
#       containers:
#       - name: mon-conteneur
#         image: 10.164.246.206:5000/nginx
#       imagePullSecrets:
#       - name: docker-hub-sec

# pour afficher infos : kubectl describe pods -n default
# kubectl logs <nom-du-pod> -c registry -n default
# erreur : https://stackoverflow.com/questions/59844553/kubernetes-failed-to-pull-image-server-gave-http-response-to-https-client
# https://medium.com/geekculture/deploying-docker-registry-on-kubernetes-3319622b8f32
# https://stackoverflow.com/questions/58476218/unable-to-push-to-private-docker-registry-via-tls
# kubectl apply -f testpod.yaml
# pour afficher les pods ainsi que leur node:
# kubectl get pods -o wide
# pour supprimer les pods:
# kubectl delete pods --all

# apiVersion: v1
# kind: Service
# metadata:
#   name: registry
#   namespace: default
# spec:
#   type: NodePort
#   selector:
#     app: registry
#   ports:
#   - protocol: TCP
#     port: 5000
#     targetPort: 5000
